kind: Deployment
apiVersion: apps/v1
metadata:
  name: html-openshift-app #dem deployment einen namen geben
  labels:
    app: html-openshift-app #labels helfen die deployments in openshift zu organisieren
    app.kubernetes.io/part-of: html-openshift-app #
spec:
  replicas: 1 #wie viele pods es haben soll (instanzen)
  selector: #deployment mit pods verbinden
    matchLabels:
      app: html-openshift-app
  template:
    metadata:
      labels:
        app: html-openshift-app
    spec:
      containers:
        - name: html-openshift-app
          image: ghcr.io/arlindlind/html-openshift-app:v1
          imagePullPolicy: Always #jedes mal wen ich den pod l√∂sche und neu deployment zieht er zuerst das neuste image
          ports:
            - containerPort: 8080
              protocol: TCP
          resources: { }
---
kind: Service
apiVersion: v1
metadata:
  name: html-openshift-app
  labels:
    app: html-openshift-app
    app.kubernetes.io/part-of: html-openshift-app
spec:
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP #gegeben, sonst funktioniert es nicht
  selector:
    app: html-openshift-app
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: html-openshift-app
  labels:
    app: html-openshift-app
    app.kubernetes.io/part-of: html-openshift-app
spec:
  to: #hier ist der link von route und service
    kind: Service
    name: html-openshift-app
  port:
    targetPort: http
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
